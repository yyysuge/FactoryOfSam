一、创建版本库：本地创建一个目录，然后初始化为版本库
    1.cd到一个目录下，执行git init，初始化该目录为版本库。
    2.添加文件到Git仓库，分两步：
		第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；
		第二步，使用命令git commit，完成。(git commit -m "wrote a readme file" 添加注释)

二、要随时掌握工作区的状态，使用git status命令。
	如果git status告诉你有文件被修改过，git diff 文件名 可以查看修改内容。
	
三、版本回退（已经commit的版本之间回退）
	HEAD指向的版本就是当前版本，git reset --hard HEAD^ 回退到上一个版本，
	git reset --hard commit_id 回退到commit_id的版本
	git log可以查看提交历史，以便确定要回退到哪个版本。（git log --pretty=oneline 将log显示一行）
	git reflog查看命令历史，以便确定要回到未来的哪个版本。
	
四、工作区，暂存区，版本库
	git add命令实际上就是把要提交的所有修改放到暂存区（Stage），
	git commit就可以一次性把暂存区的所有修改提交到分支（版本库）。
	
五、管理修改（Git跟踪并管理的是修改，而非文件）
	每次修改，如果不add到暂存区，那就不会加入到commit中。
	
六、撤销修改
	1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
	2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，
		第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
		git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区
		git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本
	3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库

七、删除文件
    1.删除文件 2.git rm 文件名，再git commit 提交到版本库
    如果删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：git checkout -- test.txt
	git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
    git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，
	但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。

八、远程仓库
	本地Git与远程的GitHub之间的通信是通过SSH的，所以要建立两者之间的SSH加密
	1.创建SSH Key   ssh-keygen -t rsa -C "youremail@example.com"  
	  在用户目录下将生成：id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥
	2.登陆GitHub，打开“Account settings”，“SSH Keys”页面：将id_rsa.pub中的内容贴上去

九、添加远程库
	1.首先本地有一个版本库，且已经初始化好了
	2.在本地的仓库下运行命令：git remote add origin git@github.com:michaelliao/learngit.git
	3.现在就可以把本地库的内容推送到远程库：git push -u origin master
	用git push命令，实际上是把当前分支master推送到远程。
	由于远程库是空的，我们第一次推送master分支时，加上了-u参数，
	Git不但会把本地的master分支内容推送的远程新的master分支，
	还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令：git push origin master
	问题：第一次push，GIt可能会提示需要先pull，可以先pull再push   git pull origin master

十、克隆远程库
	要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
	git clone git@github.com:michaelliao/gitskills.git
	如果有多个人协作开发，那么每个人各自从远程克隆一份就可以了。
	Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。

十一、创建与合并分支
	Git鼓励大量使用分支：
	查看分支：git branch
	创建分支：git branch <name>
	切换分支：git checkout <name>
	创建+切换分支：git checkout -b <name>
	合并某分支到当前分支：git merge <name>
	删除分支：git branch -d <name>

十二、解决冲突
	当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
	用git log --graph命令可以看到分支合并图。git log --graph --pretty=oneline --abbrev-commit

十三、分支管理策略
	Git分支十分强大，在团队开发中应该充分应用。
	合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，
	--no-ff参数，表示禁用Fast forward
	git merge --no-ff -m "merge with no-ff" dev 因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。
	而fast forward合并就看不出来曾经做过合并。
	
	在实际开发中，我们应该按照几个基本原则进行分支管理：
	1.master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
	2.干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，
	再把dev分支合并到master上，在master分支发布1.0版本；
	3.你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。

十四、Bug分支
	修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
	当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
	一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
	另一种方式是用git stash pop，恢复的同时把stash内容也删了
	可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：$ git stash apply stash@{0}

十五、Feature分支
	开发一个新feature，最好新建一个分支；
	如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

十六、多人协作
	查看远程库信息，使用git remote -v； 如果没有推送权限，就看不到push的地址。
	本地新建的分支如果不推送到远程，对其他人就是不可见的；
	从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
	哪些分支需要推送，哪些不需要呢？
	1.master分支是主分支，因此要时刻与远程同步；
	2.dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
	3.bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
	3.feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。
	
	在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
	建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
	从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。解决办法也很简单，
	先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送
	
	多人协作的工作模式通常是这样：
	首先，可以试图用git push origin branch-name推送自己的修改；
	如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
	如果合并有冲突，则解决冲突，并在本地提交；
	没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
	如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，
	用命令git branch --set-upstream branch-name origin/branch-name。

十七、标签管理
	Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针（跟分支很像对不对？但是分支可以移动，标签不能移动），
	所以，创建和删除标签都是瞬间完成的。
	tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。

十八、创建标签
	命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id； git tag <name> commit id
	git show <tagname>查看标签信息
	git tag -a <tagname> -m "blablabla..."可以指定标签信息；
	git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；
	命令git tag可以查看所有标签。

十九、操作标签
	命令git push origin <tagname>可以推送一个本地标签；
	命令git push origin --tags可以推送全部未推送过的本地标签；
	命令git tag -d <tagname>可以删除一个本地标签；
	命令git push origin :refs/tags/<tagname>可以删除一个远程标签。
	
二十、GitHub
	点“Fork”就在自己的账号下克隆了一个bootstrap仓库，然后，从自己的账号下clone：
	git clone git@github.com:michaelliao/bootstrap.git
	在GitHub上，可以任意Fork开源仓库；
	自己拥有Fork后的仓库的读写权限；
	可以推送pull request给官方仓库来贡献代码
	
	
	
	
	
	
	
	
	
	